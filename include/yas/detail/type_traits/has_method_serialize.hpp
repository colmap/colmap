
// Copyright (c) 2010-2017 niXman (i dot nixman dog gmail dot com). All
// rights reserved.
//
// This file is part of YAS(https://github.com/niXman/yas) project.
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
//
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef __yas__detail__type_traits__has_method_serialize_hpp
#define __yas__detail__type_traits__has_method_serialize_hpp

#include <yas/detail/tools/cast.hpp>
#include <yas/detail/type_traits/type_traits.hpp>

namespace yas {
namespace detail {

/***************************************************************************/

template <typename>
struct void_exp_result {};

template <typename T, typename U>
U const& operator,(U const&, void_exp_result<T>);

template <typename T, typename U>
U& operator,(U&, void_exp_result<T>);

template <typename T1, typename T2>
struct clone_constness {
	typedef T2 type;
};

template <typename T1, typename T2>
struct clone_constness<const T1, T2> {
	typedef const T2 type;
};

/***************************************************************************/

template<typename T>
struct has_method {
private:
	class yes { char m; };
	class no { yes m[2]; };

	struct base_mixin {
		void serialize() {}
	};

	struct base: T, base_mixin {};

	template<typename Tt, Tt t>
	class Helper {};

	template<typename U>
	static no deduce(U*, Helper<void(base_mixin::*)(), &U::serialize>* = 0);
	static yes deduce(...);

public:
	enum { value = sizeof(yes) == sizeof(deduce(YAS_SCAST(base*, nullptr))) };
};

/***************************************************************************/

template<bool is_pod, bool is_enum, typename Object, typename Sig>
struct has_method_serializer: std::false_type {};

template<typename Object, typename Sig>
struct has_method_serializer<false, false, Object, Sig> {
private:
	class yes {};
	class no { yes m[2]; };

	struct derived: Object {
		using Object::serialize;
		no serialize(...) const;
	};

	typedef typename detail::clone_constness<Object, derived>::type derived_type;

	template <typename T, typename due_type>
	struct return_value_check {
		static yes deduce(due_type);
		static no deduce(...);
		static no deduce(no);
		static no deduce(detail::void_exp_result<Object>);
	};

	template <typename T>
	struct return_value_check<T, void> {
		static yes deduce(...);
		static no deduce(no);
	};

	template <bool has, typename R>
	struct impl {
		enum { value = false };
	};

	template <typename Arg1, typename R>
	struct impl<true, R(Arg1)> {
		enum {
			value = sizeof(return_value_check<Object, R>::deduce((
				(YAS_SCAST(derived_type*, nullptr))->serialize(*YAS_SCAST(Arg1*, nullptr)), detail::void_exp_result<Object>()
			))) == sizeof(yes)
		};
	};

public:
	static const bool value = impl<detail::has_method<Object>::value, Sig>::value;
};

/***************************************************************************/

template<typename T>
struct has_const_method {
private:
	class yes { char m; };
	class no { yes m[2]; };

	struct base_mixin {
		void serialize() {}
	};

	struct base: T, base_mixin {};

	template<typename Tt, Tt t>
	class Helper {};

	template<typename U>
	static no deduce(U*, Helper<void(base_mixin::*)(), &U::serialize>* = 0);
	static yes deduce(...);

public:
	enum { value = sizeof(yes) == sizeof(deduce(YAS_SCAST(base*, nullptr))) };
};

/***************************************************************************/

template<bool is_pod, bool is_enum, typename Object, typename Sig>
struct has_const_method_serializer: std::false_type {};

template<typename Object, typename Sig>
struct has_const_method_serializer<false, false, Object, Sig> {
private:
	class yes {};
	class no { yes m[2]; };

	struct derived: Object {
		using Object::serialize;
		no serialize(...) const;
	};

	typedef typename detail::clone_constness<Object, derived>::type derived_type;

	template <typename T, typename due_type>
	struct return_value_check {
		static yes deduce(due_type);
		static no deduce(...);
		static no deduce(no);
		static no deduce(detail::void_exp_result<Object>);
	};

	template <typename T>
	struct return_value_check<T, void> {
		static yes deduce(...);
		static no deduce(no);
	};

	template <bool has, typename R>
	struct impl {
		enum { value = false };
	};

	template <typename Arg1, typename R>
	struct impl<true, R(Arg1)> {
		enum {
			value = sizeof(return_value_check<Object, R>::deduce((
				(YAS_SCAST(const derived_type*, nullptr))->serialize(*YAS_SCAST(Arg1*, nullptr)), detail::void_exp_result<Object>()
			))) == sizeof(yes)
		};
	};

public:
	static const bool value = impl<detail::has_const_method<Object>::value, Sig>::value;
};

/***************************************************************************/

} // namespace detail
} // namespace yas

#endif // __yas__detail__type_traits__has_method_serialize_hpp

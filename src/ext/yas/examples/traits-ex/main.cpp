
// Copyright (c) 2010-2017 niXman (i dot nixman dog gmail dot com). All
// rights reserved.
//
// This file is part of YAS(https://github.com/niXman/yas) project.
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
//
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include <yas/mem_streams.hpp>
#include <yas/text_iarchive.hpp>
#include <yas/text_oarchive.hpp>

#include <iostream>
#include <inttypes.h>

/***************************************************************************/

struct my_traits {
	// integer -> c-string
	template<typename T>
	static std::size_t itoa(char *buf, const std::size_t bufsize, const T v, YAS_ENABLE_IF_IS_ANY_OF(T, std::int16_t)) {
		return std::snprintf(buf, bufsize, "%d", (v+2));
	}
	template<typename T>
	static std::size_t itoa(char *buf, const std::size_t bufsize, const T v, YAS_ENABLE_IF_IS_ANY_OF(T, std::int32_t)) {
		return std::snprintf(buf, bufsize, "%d", (v+6));
	}
	template<typename T>
	static std::size_t itoa(char *buf, const std::size_t bufsize, const T v, YAS_ENABLE_IF_IS_ANY_OF(T, std::int64_t)) {
		return std::snprintf(buf, bufsize, "%" PRId64, (v+10));
	}
	template<typename T>
	static std::size_t utoa(char *buf, const std::size_t bufsize, const T v, YAS_ENABLE_IF_IS_ANY_OF(T, std::uint16_t)) {
		return std::snprintf(buf, bufsize, "%u", (v+4));
	}
	template<typename T>
	static std::size_t utoa(char *buf, const std::size_t bufsize, const T v, YAS_ENABLE_IF_IS_ANY_OF(T, std::uint32_t)) {
		return std::snprintf(buf, bufsize, "%u", (v+8));
	}
	template<typename T>
	static std::size_t utoa(char *buf, const std::size_t bufsize, const T v, YAS_ENABLE_IF_IS_ANY_OF(T, std::uint64_t)) {
		return std::snprintf(buf, bufsize, "%" PRIu64, (v+12));
	}

	// c-string -> integer
	template<typename T>
	static T atoi(const char *str, std::size_t, YAS_ENABLE_IF_IS_ANY_OF(T, std::int16_t)) {
		return std::strtol(str, 0, 10);
	}
	template<typename T>
	static T atoi(const char *str, std::size_t, YAS_ENABLE_IF_IS_ANY_OF(T, std::int32_t)) {
		return std::strtol(str, 0, 10);
	}
	template<typename T>
	static T atoi(const char *str, std::size_t, YAS_ENABLE_IF_IS_ANY_OF(T, std::int64_t)) {
		return std::strtol(str, 0, 10);
	}
	template<typename T>
	static T atou(const char *str, std::size_t, YAS_ENABLE_IF_IS_ANY_OF(T, std::uint16_t)) {
		return std::strtoul(str, 0, 10);
	}
	template<typename T>
	static T atou(const char *str, std::size_t, YAS_ENABLE_IF_IS_ANY_OF(T, std::uint32_t)) {
		return std::strtoul(str, 0, 10);
	}
	template<typename T>
	static T atou(const char *str, std::size_t, YAS_ENABLE_IF_IS_ANY_OF(T, std::uint64_t)) {
		return std::strtoul(str, 0, 10);
	}
}; // struct my_traits

/***************************************************************************/

template<typename T>
void test(T val, T expected) {
	T dst = 0;
	yas::mem_ostream os;
	yas::text_oarchive<
		 yas::mem_ostream
		,yas::text|yas::endian_as_host
		,my_traits
	> oa(os);
	oa & val;

	yas::mem_istream is(os.get_intrusive_buffer());
	yas::text_iarchive<
		 yas::mem_istream
		,yas::text|yas::endian_as_host
		,my_traits
	> ia(is);
	ia & dst;

	if ( dst != expected ) {
		YAS_THROW_EXCEPTION(std::runtime_error, "bad value");
	}
}

/***************************************************************************/

int main() {
	try {
		test<std::int16_t >(2, 4);
		test<std::uint16_t>(2, 6);
		test<std::int32_t >(2, 8);
		test<std::uint32_t>(2, 10);
		test<std::int64_t >(2, 12);
		test<std::uint64_t>(2, 14);
	} catch (const std::exception &ex) {
		std::cout << "[exception]: " << ex.what() << std::endl;
	}
}

/***************************************************************************/

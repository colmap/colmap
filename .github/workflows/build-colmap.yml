name: Build and publish wheels

on:
  push:
    branches:
      - main
  pull_request:
    types: [ assigned, opened, synchronize, reopened ]
  release:
    types: [ published, edited ]
  workflow_dispatch:

jobs:
  build:
    name: Build on ${{ matrix.config.os }} ${{ matrix.config.arch }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config: [
              {os: ubuntu-latest},
              # {os: macos-13, arch: x86_64},
              # {os: macos-13, arch: arm64},
              # {os: windows-latest},
        ]
    env:
      COMPILER_CACHE_VERSION: 1
      COMPILER_CACHE_DIR: ${{ github.workspace }}/compiler-cache
      CCACHE_DIR: ${{ github.workspace }}/compiler-cache/ccache
      CCACHE_BASEDIR: ${{ github.workspace }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        id: cache-builds
        with:
          key: v${{ env.COMPILER_CACHE_VERSION }}-${{ matrix.config.os }}-${{ matrix.config.arch }}-${{ github.run_id }}-${{ github.run_number }}
          restore-keys: v${{ env.COMPILER_CACHE_VERSION }}-${{ matrix.config.os }}-${{ matrix.config.arch }}
          path: ${{ env.COMPILER_CACHE_DIR }}
      - name: Check code format
        if: runner.os == 'Linux'
        run: |
          set +x -euo pipefail
          sudo apt-get install -y clang-format-14 black
          ./scripts/format/clang_format.sh
          ./scripts/format/black.sh
          git diff --name-only | xargs -r printf "##vso[task.LogIssue type=error;sourcepath=%s;linenumber=1;columnnumber=1;]Invalid code format, run scripts/format/*.sh\n"
          git diff --exit-code || echo "##vso[task.complete result=Failed;]"
      - name: Setup Ubuntu
        if: runner.os == 'Linux'
        run: |
          VCPKG_TARGET_TRIPLET="x64-linux-release"
          echo "VCPKG_TARGET_TRIPLET=${VCPKG_TARGET_TRIPLET}" >> "$GITHUB_ENV"

          VCPKG_INSTALLATION_ROOT="${{ github.workspace }}/vcpkg"
          CMAKE_TOOLCHAIN_FILE="${VCPKG_INSTALLATION_ROOT}/scripts/buildsystems/vcpkg.cmake"
          echo "VCPKG_INSTALLATION_ROOT=${VCPKG_INSTALLATION_ROOT}" >> "$GITHUB_ENV"
          echo "CMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}" >> "$GITHUB_ENV"

          # Fix: cibuildhweel cannot interpolate env variables.
          CONFIG_SETTINGS="cmake.define.CMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}"
          CONFIG_SETTINGS="${CONFIG_SETTINGS} cmake.define.VCPKG_TARGET_TRIPLET=${VCPKG_TARGET_TRIPLET}"
          echo "CIBW_CONFIG_SETTINGS_LINUX=${CONFIG_SETTINGS}" >> "$GITHUB_ENV"

          # Remap caching paths to the container
          CONTAINER_COMPILER_CACHE_DIR="/compiler-cache"
          CIBW_CONTAINER_ENGINE="docker; create_args: -v ${COMPILER_CACHE_DIR}:${CONTAINER_COMPILER_CACHE_DIR}"
          echo "CIBW_CONTAINER_ENGINE=${CIBW_CONTAINER_ENGINE}" >> "$GITHUB_ENV"
          echo "CONTAINER_COMPILER_CACHE_DIR=${CONTAINER_COMPILER_CACHE_DIR}" >> "$GITHUB_ENV"
          echo "CCACHE_DIR=${CONTAINER_COMPILER_CACHE_DIR}/ccache" >> "$GITHUB_ENV"
          echo "CCACHE_BASEDIR=/project" >> "$GITHUB_ENV"

          # vcpkg binary caching
          VCPKG_CACHE_DIR="${CONTAINER_COMPILER_CACHE_DIR}/vcpkg"
          VCPKG_BINARY_SOURCES="clear;files,${VCPKG_CACHE_DIR},readwrite"
          echo "VCPKG_BINARY_SOURCES=${VCPKG_BINARY_SOURCES}" >> "$GITHUB_ENV"

          CIBW_ENVIRONMENT_PASS_LINUX="VCPKG_TARGET_TRIPLET VCPKG_INSTALLATION_ROOT CMAKE_TOOLCHAIN_FILE VCPKG_BINARY_SOURCES CONTAINER_COMPILER_CACHE_DIR CCACHE_DIR CCACHE_BASEDIR"
          echo "CIBW_ENVIRONMENT_PASS_LINUX=${CIBW_ENVIRONMENT_PASS_LINUX}" >> "$GITHUB_ENV"

          sudo apt-get update && sudo apt-get install -y \
              build-essential \
              ninja-build \
              libboost-program-options-dev \
              libboost-filesystem-dev \
              libboost-graph-dev \
              libboost-system-dev \
              libeigen3-dev \
              libceres-dev \
              libflann-dev \
              libfreeimage-dev \
              libmetis-dev \
              libgoogle-glog-dev \
              libgtest-dev \
              libsqlite3-dev \
              libglew-dev \
              qtbase5-dev \
              libqt5opengl5-dev \
              libcgal-dev \
              libcgal-qt5-dev \
              libgl1-mesa-dri \
              libunwind-dev \
              xvfb
      - name: 
        if: runner.os == 'Linux'
        run: |
          set -x
          echo "##vso[task.prependpath]$(COMPILER_CACHE_DIR)/bin"
          cmake --version
          mkdir build
          cd build
          cmake .. \
            -GNinja \
            -DCMAKE_BUILD_TYPE=${{ parameters.cmakeBuildType }} \
            -DCMAKE_INSTALL_PREFIX=./install \
            -DTESTS_ENABLED=ON \
            -DCMAKE_CUDA_ARCHITECTURES=50 \
            -DASAN_ENABLED=${{ parameters.asanEnabled }} \
            -DGUI_ENABLED=${{ parameters.guiEnabled }}
          ninja -k $(numAllowedNinjaErrors)

      - name: Setup macOS
        if: runner.os == 'macOS'
        run: |
          if [[ ${{ matrix.config.arch }} == "x86_64" ]]; then
            VCPKG_TARGET_TRIPLET="x64-osx"
          elif [[ ${{ matrix.config.arch }} == "arm64" ]]; then
            VCPKG_TARGET_TRIPLET="arm64-osx-release"
          else
            exit 1
          fi
          echo "VCPKG_TARGET_TRIPLET=${VCPKG_TARGET_TRIPLET}" >> "$GITHUB_ENV"

          VCPKG_INSTALLATION_ROOT="${{ github.workspace }}/vcpkg"
          CMAKE_TOOLCHAIN_FILE="${VCPKG_INSTALLATION_ROOT}/scripts/buildsystems/vcpkg.cmake"
          CMAKE_OSX_ARCHITECTURES=${{ matrix.config.arch }}
          echo "VCPKG_INSTALLATION_ROOT=${VCPKG_INSTALLATION_ROOT}" >> "$GITHUB_ENV"
          echo "CMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}" >> "$GITHUB_ENV"
          echo "CMAKE_OSX_ARCHITECTURES=${CMAKE_OSX_ARCHITECTURES}" >> "$GITHUB_ENV"

          # Fix: cibuildhweel cannot interpolate env variables.
          CONFIG_SETTINGS="cmake.define.CMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}"
          CONFIG_SETTINGS="${CONFIG_SETTINGS} cmake.define.VCPKG_TARGET_TRIPLET=${VCPKG_TARGET_TRIPLET}"
          CONFIG_SETTINGS="${CONFIG_SETTINGS} cmake.define.CMAKE_OSX_ARCHITECTURES=${CMAKE_OSX_ARCHITECTURES}"
          echo "CIBW_CONFIG_SETTINGS_MACOS=${CONFIG_SETTINGS}" >> "$GITHUB_ENV"

          # vcpkg binary caching
          VCPKG_CACHE_DIR="${COMPILER_CACHE_DIR}/vcpkg"
          VCPKG_BINARY_SOURCES="clear;files,${VCPKG_CACHE_DIR},readwrite"
          echo "VCPKG_BINARY_SOURCES=${VCPKG_BINARY_SOURCES}" >> "$GITHUB_ENV"
      - name: Setup Windows
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $VCPKG_INSTALLATION_ROOT="${{ github.workspace }}/vcpkg"
          echo "VCPKG_INSTALLATION_ROOT=${VCPKG_INSTALLATION_ROOT}" >> "${env:GITHUB_ENV}"
          $CMAKE_TOOLCHAIN_FILE = "${VCPKG_INSTALLATION_ROOT}/scripts/buildsystems/vcpkg.cmake"
          echo "CMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}" >> "${env:GITHUB_ENV}"
          $VCPKG_TARGET_TRIPLET = "x64-windows"
          echo "VCPKG_TARGET_TRIPLET=${VCPKG_TARGET_TRIPLET}" >> "${env:GITHUB_ENV}"

          # Fix: cibuildhweel cannot interpolate env variables.
          $CMAKE_TOOLCHAIN_FILE = $CMAKE_TOOLCHAIN_FILE.replace('\', '/')
          $CONFIG_SETTINGS = "cmake.define.CMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}"
          $CONFIG_SETTINGS = "${CONFIG_SETTINGS} cmake.define.VCPKG_TARGET_TRIPLET=${VCPKG_TARGET_TRIPLET}"
          echo "CIBW_CONFIG_SETTINGS_WINDOWS=${CONFIG_SETTINGS}" >> "${env:GITHUB_ENV}"
          $CIBW_REPAIR_WHEEL_COMMAND = "delvewheel repair -v --add-path ${VCPKG_INSTALLATION_ROOT}/installed/${VCPKG_TARGET_TRIPLET}/bin -w {dest_dir} {wheel}"
          echo "CIBW_REPAIR_WHEEL_COMMAND_WINDOWS=${CIBW_REPAIR_WHEEL_COMMAND}" >> "${env:GITHUB_ENV}"

          # vcpkg binary caching
          $VCPKG_CACHE_DIR = "${env:COMPILER_CACHE_DIR}/vcpkg"
          $VCPKG_BINARY_SOURCES = "clear;files,${VCPKG_CACHE_DIR},readwrite"
          echo "VCPKG_BINARY_SOURCES=${VCPKG_BINARY_SOURCES}" >> "${env:GITHUB_ENV}"

      - name: Build
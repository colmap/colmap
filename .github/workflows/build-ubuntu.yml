name: colmap

on:
  push:
    branches:
      - main
  pull_request:
    types: [ assigned, opened, synchronize, reopened ]
  release:
    types: [ published, edited ]
  workflow_dispatch:

jobs:
  build:
    name: Build on ${{ matrix.config.os }} ${{ matrix.config.arch }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config: [
              {
                os: ubuntu-22.04,
                cmakeBuildType: Release,
                asanEnabled: false,
                guiEnabled: false
              },
              # {os: macos-13, arch: x86_64},
              # {os: macos-13, arch: arm64},
              # {os: windows-latest},
        ]
    env:
      COMPILER_CACHE_VERSION: 1
      COMPILER_CACHE_DIR: ${{ github.workspace }}/compiler-cache
      CCACHE_DIR: ${{ github.workspace }}/compiler-cache/ccache
      CCACHE_BASEDIR: ${{ github.workspace }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        id: cache-builds
        with:
          key: v${{ env.COMPILER_CACHE_VERSION }}-${{ matrix.config.os }}-${{ matrix.config.arch }}-${{ github.run_id }}-${{ github.run_number }}
          restore-keys: v${{ env.COMPILER_CACHE_VERSION }}-${{ matrix.config.os }}-${{ matrix.config.arch }}
          path: ${{ env.COMPILER_CACHE_DIR }}

      - name: Check code format
        if: runner.os == 'Linux'
        run: |
          set +x -euo pipefail
          sudo apt-get install -y clang-format-14 black
          ./scripts/format/clang_format.sh
          ./scripts/format/black.sh
          git diff --name-only | xargs -r printf "##vso[task.LogIssue type=error;sourcepath=%s;linenumber=1;columnnumber=1;]Invalid code format, run scripts/format/*.sh\n"
          git diff --exit-code || echo "##vso[task.complete result=Failed;]"

      - name: Setup Ubuntu
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install -y \
              build-essential \
              ninja-build \
              libboost-program-options-dev \
              libboost-filesystem-dev \
              libboost-graph-dev \
              libboost-system-dev \
              libeigen3-dev \
              libceres-dev \
              libflann-dev \
              libfreeimage-dev \
              libmetis-dev \
              libgoogle-glog-dev \
              libgtest-dev \
              libsqlite3-dev \
              libglew-dev \
              qtbase5-dev \
              libqt5opengl5-dev \
              libcgal-dev \
              libcgal-qt5-dev \
              libgl1-mesa-dri \
              libunwind-dev \
              xvfb

      - name: Configure and build
        if: runner.os == 'Linux'
        run: |
          set -x
          cmake --version
          mkdir build
          cd build
          cmake .. \
            -GNinja \
            -DCMAKE_BUILD_TYPE=${{ runner.cmakeBuildType }} \
            -DCMAKE_INSTALL_PREFIX=./install \
            -DTESTS_ENABLED=ON \
            -DCMAKE_CUDA_ARCHITECTURES=50 \
            -DASAN_ENABLED=${{ runner.asanEnabled }} \
            -DGUI_ENABLED=${{ runner.guiEnabled }}
          ninja -k 10000

parameters:
  visualStudioVersion: '2019'

jobs:
- job: windows_build_${{ parameters.visualStudioVersion }}
  displayName: Windows VS${{ parameters.visualStudioVersion }}
  timeoutInMinutes: 360
  pool:
    vmImage: 'windows-${{ parameters.visualStudioVersion }}'
  variables:
    vcpkgGitCommitId: 4c1734ba2a969b1e6daa0ac79bc46ead7324df90
    VCPKG_BINARY_SOURCES: 'clear;nuget,https://pkgs.dev.azure.com/colmap/colmap/_packaging/vcpkg/nuget/v3/index.json,readwrite'
    CCACHE_DIR: $(Pipeline.Workspace)/ccache
    CCACHE_BASEDIR: $(Build.SourcesDirectory)
    CCACHE_VERSION: 2
  steps:
  - task: NuGetAuthenticate@0
    displayName: NuGet Authenticate

  - pwsh: |
      curl -L -o `
        $(Build.BinariesDirectory)/ninja.zip `
        https://github.com/ninja-build/ninja/releases/download/v1.10.2/ninja-win.zip
      Expand-Archive -LiteralPath $(Build.BinariesDirectory)/ninja.zip -DestinationPath $(Build.BinariesDirectory)
    displayName: Prepare build

  - pwsh: |
      git clone https://github.com/microsoft/vcpkg
      cd vcpkg
      git reset --hard $(vcpkgGitCommitId)
      ./bootstrap-vcpkg.bat
      $(Build.SourcesDirectory)/scripts/shell/enter_vs_dev_shell.ps1
      ./vcpkg.exe install --recurse @$(Build.SourcesDirectory)/.azure-pipelines/build-windows-vcpkg.txt --clean-after-build
    workingDirectory: $(Build.BinariesDirectory)
    displayName: Setup vcpkg

  - task: Cache@2
    inputs:
      key: ccache | "$(CCACHE_VERSION)" | "$(Agent.OS)" | "${{ parameters.visualStudioVersion }}" | "$(Build.BuildNumber)"
      restoreKeys: ccache | "$(CCACHE_VERSION)" | "$(Agent.OS)" | "${{ parameters.visualStudioVersion }}"
      path: $(CCACHE_DIR)
      cacheHitVar: CCACHE_RESTORED
    displayName: Restore CCache

  - pwsh: |
      $(Build.SourcesDirectory)/.azure-pipelines/install-ccache.ps1 -Destination "$(CCACHE_DIR)/bin"
    displayName: Install CCache
    condition: ne(variables.CCACHE_RESTORED, 'true')

  - pwsh: |
      echo "##vso[task.prependpath]$(CCACHE_DIR)/bin"
    displayName: Setup CCache

  - pwsh: |
      $(Build.SourcesDirectory)/scripts/shell/enter_vs_dev_shell.ps1
      $(Build.BinariesDirectory)/vcpkg/vcpkg.exe integrate install
      mkdir build
      cd build
      cmake .. `
        -GNinja `
        -DCMAKE_MAKE_PROGRAM=$(Build.BinariesDirectory)/ninja.exe `
        -DCMAKE_BUILD_TYPE=Release `
        -DTESTS_ENABLED=ON `
        -DCMAKE_TOOLCHAIN_FILE=$(Build.BinariesDirectory)/vcpkg/scripts/buildsystems/vcpkg.cmake `
        -DVCPKG_TARGET_TRIPLET=x64-windows
      $(Build.BinariesDirectory)/ninja.exe
    workingDirectory: $(Build.SourcesDirectory)
    displayName: Configure and build

  - pwsh: |
      $(Build.BinariesDirectory)/vcpkg/vcpkg.exe integrate install
      ctest -E "(feature/colmap_feature_sift_test)|(util/colmap_util_opengl_utils_test)|(mvs/colmap_mvs_gpu_mat_test)"
      $tests_pass=$LastExitCode
      if ($tests_pass -ne 0) {
          echo "`n`n`nTests failed, rerunning with verbose output"
          ctest --rerun-failed --output-on-failure
      }
      exit $tests_pass
    workingDirectory: $(Build.SourcesDirectory)/build
    displayName: Run tests

  - pwsh: |
      ccache --show-stats
      ccache --evict-older-than 1d
      ccache --show-stats
    displayName: Cleanup ccache

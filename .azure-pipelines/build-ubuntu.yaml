parameters:
  displayName: Ubuntu 20.04
  ubuntuVersion: '20.04'
  cudaEnabled: false
  asanEnabled: false
  e2eTestsEnabled: false
  checkCodeFormat: false
  cmakeBuildType: Release
  guiEnabled: true

jobs:
- job: ubuntu_build_${{ replace(parameters.ubuntuVersion, '.', '') }}_cuda_${{ parameters.cudaEnabled }}_asan_${{ parameters.asanEnabled }}_${{ parameters.cmakeBuildType }}_e2e_${{ parameters.e2eTestsEnabled }}
  displayName: ${{ parameters.displayName }}
  pool:
    vmImage: 'ubuntu-${{ parameters.ubuntuVersion }}'
  variables:
    COMPILER_CACHE_DIR: $(Pipeline.Workspace)/compiler-cache
    COMPILER_CACHE_VERSION: 2
    CCACHE_DIR: $(COMPILER_CACHE_DIR)/ccache
    CCACHE_BASEDIR: $(Build.SourcesDirectory)
    CTCACHE_DIR: $(COMPILER_CACHE_DIR)/ctcache
    ${{ if and(eq(parameters.asanEnabled, false), eq(parameters.guiEnabled, true)) }}:
      ctestExclusions: "(mvs/colmap_mvs_gpu_mat_test)"
    ${{ if or(eq(parameters.asanEnabled, true), eq(parameters.guiEnabled, false)) }}:
      ctestExclusions: "(feature/colmap_feature_sift_test)|(util/colmap_util_opengl_utils_test)|(mvs/colmap_mvs_gpu_mat_test)"
    ${{ if eq(parameters.cmakeBuildType, 'ClangTidy') }}:
      # Do not abort compilation in ClangTidy mode, so we see issues
      # for all targets logged out to the console.
      numAllowedNinjaErrors: 1000
    ${{ if ne(parameters.cmakeBuildType, 'ClangTidy') }}:
      numAllowedNinjaErrors: 1
  steps:
  - ${{ if eq(parameters.checkCodeFormat, true) }}:
    - script: |
        set +x -euo pipefail
        sudo apt-get install -y clang-format-14
        ./scripts/shell/clang_format.sh
        git diff --name-only | xargs -r printf "##vso[task.LogIssue type=error;sourcepath=%s;linenumber=1;columnnumber=1;]Invalid code format, run scripts/shell/clang_format.sh\n"
        git diff --exit-code || echo "##vso[task.complete result=Failed;]"
      displayName: Check code format

  - script: |
      sudo apt-get update && sudo apt-get install -y \
        build-essential \
        ninja-build \
        libboost-program-options-dev \
        libboost-filesystem-dev \
        libboost-graph-dev \
        libboost-system-dev \
        libeigen3-dev \
        libceres-dev \
        libflann-dev \
        libfreeimage-dev \
        libmetis-dev \
        libgoogle-glog-dev \
        libgtest-dev \
        libsqlite3-dev \
        libglew-dev \
        qtbase5-dev \
        libqt5opengl5-dev \
        libcgal-dev \
        libcgal-qt5-dev \
        libgl1-mesa-dri \
        libunwind-dev \
        xvfb
    displayName: Install dependencies
  
  - ${{ if eq(parameters.cudaEnabled, true) }}:
    - ${{ if eq(parameters.ubuntuVersion, '22.04') }}:
      - script: |
          sudo apt-get install -y \
            nvidia-cuda-toolkit \
            nvidia-cuda-toolkit-gcc \
            gcc-10 g++-10
          echo '##vso[task.setvariable variable=CC]/usr/bin/gcc-10'
          echo '##vso[task.setvariable variable=CXX]/usr/bin/g++-10'
          echo '##vso[task.setvariable variable=CUDAHOSTCXX]/usr/bin/g++-10'
        displayName: Install CUDA
    - ${{ if ne(parameters.ubuntuVersion, '22.04') }}:
      - script: |
          sudo apt-get install -y \
            nvidia-cuda-toolkit \
            nvidia-cuda-toolkit-gcc
          echo '##vso[task.setvariable variable=CC]/usr/bin/cuda-gcc'
          echo '##vso[task.setvariable variable=CXX]/usr/bin/cuda-g++'
        displayName: Install CUDA

  - ${{ if eq(parameters.asanEnabled, true) }}:
    - script: |
        sudo apt-get install -y clang-15 libomp-15-dev
        echo '##vso[task.setvariable variable=CC]/usr/bin/clang-15'
        echo '##vso[task.setvariable variable=CXX]/usr/bin/clang++-15'
      displayName: Install Clang

  - ${{ if eq(parameters.cmakeBuildType, 'ClangTidy') }}:
    - script: |
        sudo apt-get install -y clang-15 clang-tidy-15 libomp-15-dev
        echo '##vso[task.setvariable variable=CC]/usr/bin/clang-15'
        echo '##vso[task.setvariable variable=CXX]/usr/bin/clang++-15'
      displayName: Install Clang

  - task: Cache@2
    inputs:
      key: ccache | "$(COMPILER_CACHE_VERSION)" | "$(Agent.OS)" | "${{ parameters.displayName }}" | "$(Build.BuildNumber)"
      restoreKeys: ccache | "$(COMPILER_CACHE_VERSION)" | "$(Agent.OS)" | "${{ parameters.displayName }}"
      path: $(COMPILER_CACHE_DIR)
      cacheHitVar: CCACHE_RESTORED
    displayName: Restore compiler cache

  - script: |
      set -x
      wget https://github.com/ccache/ccache/releases/download/v4.8.2/ccache-4.8.2-linux-x86_64.tar.xz
      echo "0b33f39766fe9db67f40418aed6a5b3d7b2f4f7fab025a8213264b77a2d0e1b1  ccache-4.8.2-linux-x86_64.tar.xz" | sha256sum --check
      tar xfv ccache-4.8.2-linux-x86_64.tar.xz
      mkdir -p "$(COMPILER_CACHE_DIR)/bin"
      mv ./ccache-4.8.2-linux-x86_64/ccache "$(COMPILER_CACHE_DIR)/bin"
      ctcache_commit_id="66c3614175fc650591488519333c411b2eac15a3"
      wget https://github.com/matus-chochlik/ctcache/archive/${ctcache_commit_id}.zip
      echo "108b087f156a9fe7da0c796de1ef73f5855d2a33a27983769ea39061359a40fc  ${ctcache_commit_id}.zip" | sha256sum --check
      unzip "${ctcache_commit_id}.zip"
      mv ctcache-${ctcache_commit_id}/clang-tidy* "$(COMPILER_CACHE_DIR)/bin"
    displayName: Install compiler cache
    condition: ne(variables.CCACHE_RESTORED, 'true')
  
  - script: |
      echo "##vso[task.prependpath]$(COMPILER_CACHE_DIR)/bin"
      mkdir -p "$(CCACHE_DIR)" "$(CTCACHE_DIR)"
    displayName: Setup compiler cache

  - script: |
      set -x
      echo "##vso[task.prependpath]$(COMPILER_CACHE_DIR)/bin"
      cmake --version
      mkdir build
      cd build
      cmake .. \
        -GNinja \
        -DCMAKE_BUILD_TYPE=${{ parameters.cmakeBuildType }} \
        -DCMAKE_INSTALL_PREFIX=./install \
        -DTESTS_ENABLED=ON \
        -DCMAKE_CUDA_ARCHITECTURES=50 \
        -DASAN_ENABLED=${{ parameters.asanEnabled }} \
        -DGUI_ENABLED=${{ parameters.guiEnabled }}
      ninja -k $(numAllowedNinjaErrors)
    displayName: Configure and build colmap

  - ${{ if and(eq(parameters.cmakeBuildType, 'Release'), eq(parameters.asanEnabled, false)) }}:
    - script: |
        set -x
        cd build
        ninja install
        cd ../doc/sample-project
        mkdir build
        cd build
        colmap_DIR=$(Build.SourcesDirectory)/build/install/share/colmap cmake .. \
          -GNinja \
          -DCMAKE_CUDA_ARCHITECTURES=50
        ninja
        ./hello_world --message "world"
      displayName: Install colmap and build sample

  - ${{ if ne(parameters.cmakeBuildType, 'ClangTidy') }}:
    - script: |
        export DISPLAY=":99.0"
        export QT_QPA_PLATFORM="offscreen"
        Xvfb :99 &
        sleep 3
        cd build
        ctest -E "$(ctestExclusions)"
        tests_pass=$?
        if [ $tests_pass -ne 0 ]; then
            echo "Tests failed, rerunning with verbose output"
            ctest --rerun-failed --output-on-failure
        fi
        exit $tests_pass
      displayName: Run tests

  - ${{ if eq(parameters.e2eTestsEnabled, true) }}:
    - script: |
        export DISPLAY=":99.0"
        export QT_QPA_PLATFORM="offscreen"
        Xvfb :99 &
        sleep 3
        sudo apt install 7zip
        mkdir eth3d_benchmark
        # Error thresholds in degrees and meters,
        # as the ETH3D groundtruth has metric scale.
        python ./scripts/python/benchmark_eth3d.py \
            --workspace_path ./eth3d_benchmark \
            --colmap_path ./build/src/colmap/exe/colmap \
            --dataset_names boulders,door \
            --max_rotation_error 1.0 \
            --max_proj_center_error 0.05
      displayName: Run E2E tests

  - script: |
      set -x
      ccache --show-stats --verbose
      ccache --evict-older-than 1d
      ccache --show-stats --verbose

      echo "Size of ctcache before: $(du -sh $(CTCACHE_DIR))"
      echo "Number of ctcache files before: $(find $(CTCACHE_DIR) | wc -l)"
      # Delete cache older than 10 days.
      find "$(CTCACHE_DIR)"/*/ -mtime +10 -print0 | xargs -0 rm -rf
      echo "Size of ctcache after:  $(du -sh $(CTCACHE_DIR))"
      echo "Number of ctcache files after: $(find $(CTCACHE_DIR) | wc -l)"
    displayName: Cleanup compiler cache

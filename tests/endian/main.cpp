
// Copyright (c) 2010-2017 niXman (i dot nixman dog gmail dot com). All
// rights reserved.
//
// This file is part of YAS(https://github.com/niXman/yas) project.
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
//
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include <yas/mem_streams.hpp>
#include <yas/binary_oarchive.hpp>
#include <yas/binary_iarchive.hpp>
#include <yas/tools/hexdumper.hpp>

#include <iostream>
#include <cassert>

/***************************************************************************/

int main() {
	enum: std::size_t { base_flags = yas::binary|yas::seq_size_32 };
	{
		std::uint32_t v = 33, v2 = 0;
		yas::mem_ostream os;
		yas::binary_oarchive<yas::mem_ostream, base_flags|yas::endian_as_host> oa(os);
		assert(YAS_LITTLE_ENDIAN() ? oa.is_little_endian() : 1);
		assert(YAS_BIG_ENDIAN() ? oa.is_big_endian() : 1);
		oa & v;

		const yas::intrusive_buffer buf = os.get_intrusive_buffer();
		std::cout << "as_host:\n" << yas::hex_dump(buf.data, buf.size) << std::endl;

		yas::mem_istream is(os.get_intrusive_buffer());
		yas::binary_iarchive<yas::mem_istream, base_flags|yas::endian_as_host> ia(is);
		assert(YAS_LITTLE_ENDIAN() ? ia.is_little_endian() : 1);
		assert(YAS_BIG_ENDIAN() ? ia.is_big_endian() : 1);
		ia & v2;

		assert(v == v2);
	}
	{
		std::uint32_t v = 33, v2 = 0;
		yas::mem_ostream os;
		yas::binary_oarchive<yas::mem_ostream, base_flags|yas::endian_little> oa(os);
		assert(oa.is_little_endian());
		assert(!oa.is_big_endian());
		oa & v;

		const yas::intrusive_buffer buf = os.get_intrusive_buffer();
		std::cout << "little:\n" << yas::hex_dump(buf.data, buf.size) << std::endl;

		yas::mem_istream is(os.get_intrusive_buffer());
		yas::binary_iarchive<yas::mem_istream, base_flags|yas::endian_little> ia(is);
		assert(ia.is_little_endian());
		assert(!ia.is_big_endian());
		ia & v2;

		assert(v == v2);
	}
	{
		std::uint32_t v = 33, v2 = 0;
		yas::mem_ostream os;
		yas::binary_oarchive<yas::mem_ostream, base_flags|yas::endian_big> oa(os);
		assert(!oa.is_little_endian());
		assert(oa.is_big_endian());
		oa & v;

		const yas::intrusive_buffer buf = os.get_intrusive_buffer();
		std::cout << "big:\n" << yas::hex_dump(buf.data, buf.size) << std::endl;

		yas::mem_istream is(os.get_intrusive_buffer());
		yas::binary_iarchive<yas::mem_istream, base_flags|yas::endian_big> ia(is);
		assert(!ia.is_little_endian());
		assert(ia.is_big_endian());
		ia & v2;

		assert(v == v2);
	}
	{
		std::uint32_t v = 33, v2 = 0;
		yas::mem_ostream os;
		yas::binary_oarchive<yas::mem_ostream, base_flags|yas::endian_little> oa(os);
		assert(oa.is_little_endian());
		assert(!oa.is_big_endian());
		oa & v;

		const yas::intrusive_buffer buf = os.get_intrusive_buffer();
		std::cout << "little:\n" << yas::hex_dump(buf.data, buf.size) << std::endl;

		yas::mem_istream is(os.get_intrusive_buffer());
		yas::binary_iarchive<yas::mem_istream, base_flags|yas::endian_big> ia(is);
		assert(ia.is_little_endian());
		assert(!ia.is_big_endian());
		ia & v2;

		assert(v2 == 553648128);
	}
}

/***************************************************************************/
